import streamlit as st
import requests
import json

# Configura√ß√£o da P√°gina
st.set_page_config(page_title="M√©todo Babi - Monitoramento IA", layout="wide")

# Carregar chave da API do Streamlit Secrets
API_KEY = st.secrets["perplexity"]["API_KEY"]
HEADERS = {
    "Authorization": f"Bearer {API_KEY}",
    "Content-Type": "application/json"
}

# Inicializar sess√£o de hist√≥rico
if "messages" not in st.session_state:
    st.session_state.messages = []

# Layout principal
tabs = st.tabs(["Configura√ß√£o + Fontes", "Dashboard", "Data Lab", "Decision Make"])

# Se√ß√£o de Configura√ß√£o + Fontes
with tabs[0]:
    st.header("üîß Configura√ß√£o e Fontes de Dados")
    st.write("Defina palavras-chave e fontes de coleta de dados para o monitoramento.")
    keywords = st.text_area("Palavras-chave para monitoramento", "intelig√™ncia artificial, mercado, inova√ß√£o")
    if st.button("Salvar Configura√ß√£o"):
        st.session_state.keywords = keywords
        st.success("Configura√ß√£o salva com sucesso!")

# Se√ß√£o de Dashboard
with tabs[1]:
    st.header("üìä Dashboard - Monitoramento de Not√≠cias")
    st.write("Visualiza√ß√£o das √∫ltimas not√≠cias categorizadas pela IA.")
    
    # Simula√ß√£o de not√≠cias categorizadas
    example_news = [
        {"Data": "2025-02-05", "Link": "https://noticia1.com", "Relev√¢ncia": "Bomba", "Resumo": "Nova tend√™ncia no mercado AI!",
         "Fortalezas": "Alto impacto", "Fraquezas": "Alto risco", "P√∫blico-alvo": "Empresas de tecnologia", "Colabora√ß√£o": "Nenhuma", "Per√≠odo da A√ß√£o": "Q1 2025"},
        {"Data": "2025-02-04", "Link": "https://noticia2.com", "Relev√¢ncia": "BAU", "Resumo": "Concorrente lan√ßou novo produto.",
         "Fortalezas": "Inova√ß√£o incremental", "Fraquezas": "Pouca ado√ß√£o inicial", "P√∫blico-alvo": "Startups", "Colabora√ß√£o": "Parceria com X", "Per√≠odo da A√ß√£o": "Q2 2025"}
    ]
    st.table(example_news)

# Se√ß√£o de Data Lab (An√°lise Sem√¢ntica)
with tabs[2]:
    st.header("üî¨ Data Lab - An√°lise Sem√¢ntica e IA")
    st.write("An√°lise sem√¢ntica com InfraNodus e respostas da API Perplexity.")
    
    user_input = st.chat_input("Pergunte sobre as tend√™ncias do mercado...")
    if user_input:
        st.session_state.messages.append({"role": "user", "content": user_input})
        with st.chat_message("user"):
            st.markdown(user_input)
        
        payload = {
            "model": "sonar-reasoning",
            "messages": st.session_state.messages
        }
        response = requests.post("https://api.perplexity.ai/chat/completions", headers=HEADERS, json=payload)
        
        if response.status_code == 200:
            response_data = response.json()
            reply = response_data["choices"][0]["message"]["content"]
            st.session_state.messages.append({"role": "assistant", "content": reply})
            with st.chat_message("assistant"):
                st.markdown(reply)
        else:
            st.error(f"‚ùå Erro na API Perplexity: {response.json()}")

# Se√ß√£o de Decision Make
with tabs[3]:
    st.header("ü§ñ Decision Make - Tomada de Decis√£o Automatizada")
    st.write("IA ajuda a decidir pr√≥ximos passos estrat√©gicos.")
    options = ["Ajustar Campanha", "Explorar Novos Mercados", "Melhorar Produto"]
    decision = st.selectbox("Qual a√ß√£o tomar?", options)
    if st.button("Confirmar A√ß√£o"):
        st.success(f"A√ß√£o '{decision}' registrada com sucesso!")
